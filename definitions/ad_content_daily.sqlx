config {
  type: "incremental",
  schema: "analytics",
  name: "roas_monitor_ad_content_prod_daily",
  description: "",
  bigquery: {
    partitionBy: "date"
  }
}

WITH 
  -- Facebook Advertising data
  facebook_ads AS(
  SELECT
  date,
  FORMAT_DATE('%A', date) AS day_of_the_week,
  FORMAT_DATE('%G-%V', date) AS week_of_the_year,
  CAST(EXTRACT(MONTH from date) as string) AS month_of_the_year,
  CASE 
    WHEN REGEXP_CONTAINS(campaign, r'netherlands|^Netherlands ') THEN 'NL'
    WHEN REGEXP_CONTAINS(campaign, r'belgium') THEN 'BE'
    WHEN REGEXP_CONTAINS(campaign, r'(?i)BE') THEN 'BE'
    WHEN REGEXP_CONTAINS(campaign, r'(?i)FR') THEN 'FR'
    WHEN REGEXP_CONTAINS(campaign, r'(?i)NL') THEN 'NL'
    WHEN REGEXP_CONTAINS(campaign, r'France') THEN 'FR'
    WHEN REGEXP_CONTAINS(campaign, r'France') THEN 'FR'
    WHEN REGEXP_CONTAINS(campaign, r'(?i)^BE') THEN 'BE'
    WHEN REGEXP_CONTAINS(campaign, r'(?i)^FR') THEN 'FR'
    WHEN REGEXP_CONTAINS(campaign, r'(?i)FR$') THEN 'FR'
    WHEN REGEXP_CONTAINS(campaign, r'(?i)^NL') THEN 'NL'
    WHEN REGEXP_CONTAINS(campaign, r'(?i)^ES') THEN 'ES'
    WHEN REGEXP_CONTAINS(campaign, r'(?i) ES ') THEN 'ES'
    ELSE 'NL'
    END AS country,
  campaign AS campaign_name,
  ad_name,
  'facebook_instagram' AS advertising_source,
  CASE 
    WHEN REGEXP_CONTAINS(campaign, r'(?i).*Engagement.*') THEN 'Engagement'
    WHEN REGEXP_CONTAINS(campaign, r'(?i).*Prospecting.*') THEN 'Prospecting'
    WHEN REGEXP_CONTAINS(campaign, r'(?i).*Retargeting.*') THEN 'Retargeting'
    ELSE 'not set'
    END AS campaign_type,
  SUM(link_clicks) AS link_clicks,
  SUM(impressions) AS impressions,
  SUM(reach) AS reach,
  SUM(actions_offsite_conversion_fb_pixel_purchase ) AS transactions,
  ROUND(SUM(action_values_offsite_conversion_fb_pixel_purchase),2) AS revenue,
  ROUND(SUM(totalcost),2) AS ad_cost
FROM `crack-celerity-275610.roas_monitor.raw_facebook_3d`
GROUP BY
  date,
  day_of_the_week,
  week_of_the_year,
  month_of_the_year,
  country,
  campaign_name,
  ad_name,
  advertising_source,
  campaign_type
ORDER BY
  date    
  ),

  -- Tiktok Advertising data 
tiktok_ads AS(
    SELECT 
    date,
    FORMAT_DATE('%A', date) AS day_of_the_week,
    FORMAT_DATE('%G-%V', date) AS week_of_the_year,
    CAST(EXTRACT(MONTH from date) as string) AS month_of_the_year,
    CASE
      WHEN REGEXP_CONTAINS(campaign, r'^FR \|') THEN 'FR'
      WHEN REGEXP_CONTAINS(campaign, r'^NL \|') THEN 'NL'
      WHEN REGEXP_CONTAINS(campaign, r'^BE \|') THEN 'BE'
      WHEN REGEXP_CONTAINS(campaign, r'^ES \|') THEN 'ES'
      ELSE 'unknown'
      END AS country,
    campaign AS campaign_name,
    ad_name,
    'tiktok' AS advertising_source,
    'not_set' AS campaign_type,
    SUM(clicks) AS link_clicks,
    SUM(impressions) AS impressions,
    SUM(reach) AS reach,
    SUM(on_web_order) AS transactions,
    ROUND(SUM(total_on_web_order_value),2) AS revenue,
    ROUND(SUM(spend),2) AS ad_cost
  FROM `crack-celerity-275610.roas_monitor.raw_tiktok_3d`
  GROUP BY
    date,
    day_of_the_week,
    week_of_the_year,
    month_of_the_year,
    country,
    campaign_name,
    ad_name,
    advertising_source,
    campaign_type
  ORDER BY
    date 
  ),

    -- Pinterest Advertising data
  pinterest_ads AS(
  SELECT
    date,
    FORMAT_DATE('%A', date) AS day_of_the_week,
    FORMAT_DATE('%G-%V', date) AS week_of_the_year,
    CAST(EXTRACT(MONTH from date) as string) AS month_of_the_year,
    CASE 
      WHEN REGEXP_CONTAINS(campaign, r'NL \|') THEN 'NL'
      ELSE campaign
      END AS country,
    campaign AS campaign_name,
    CAST(NULL AS STRING) AS ad_name,
    'pinterest' AS advertising_source,
    'not_set' AS campaign_type,
    SUM(outbound_clicks) AS link_clicks,
    SUM(impressions) AS impressions,
    SUM(reach) AS reach,
    SUM(total_checkout) AS transactions,
    ROUND(SUM(checkout_revenue),2) AS revenue,
    ROUND(SUM(spend),2) AS ad_cost
  FROM `crack-celerity-275610.roas_monitor.raw_pinterest_3d` --when pinterest table is fixed, fix this to raw_pinterest_3d
  GROUP BY
    date,
    day_of_the_week,
    week_of_the_year,
    month_of_the_year,
    country,
    campaign_name,
    ad_name,
    advertising_source,
    campaign_type
  ORDER BY
    date
  ),
    -- Snapchat Advertising data --new columns added
  snapchat_ads AS(
    SELECT 
    date,
    FORMAT_DATE('%A', date) AS day_of_the_week,
    FORMAT_DATE('%G-%V', date) AS week_of_the_year,
    CAST(EXTRACT(MONTH from date) as string) AS month_of_the_year,
    CASE
      WHEN REGEXP_CONTAINS(campaign, r'(?i).*FR.*') THEN 'FR'
      WHEN REGEXP_CONTAINS(campaign, r'(?i).*NL.*') THEN 'NL'
      WHEN REGEXP_CONTAINS(campaign, r'(?i).*BE.*') THEN 'BE'
      WHEN REGEXP_CONTAINS(campaign, r'(?i).*ES.*') THEN 'ES'
      ELSE 'unknown'
      END AS country,
    campaign AS campaign_name,
    ad_name,
    'snapchat' AS advertising_source,
    CASE 
      WHEN REGEXP_CONTAINS(campaign, r'(?i).*Consideration.*') THEN 'Consideration'
      WHEN REGEXP_CONTAINS(campaign, r'(?i).*Prospecting.*') THEN 'Prospecting'
      ELSE 'not set'
      END AS campaign_type,
    SUM(clicks) AS link_clicks,
    SUM(paid_impressions) AS impressions,
    SUM(total_reach) AS reach,
    SUM(conversion_purchases) AS transactions,
    ROUND(SUM(conversion_purchases_value),2) AS revenue,
    ROUND(SUM(spend),2) AS ad_cost
  FROM `crack-celerity-275610.roas_monitor.raw_snapchat_3d`
  GROUP BY
    date,
    day_of_the_week,
    week_of_the_year,
    month_of_the_year,
    country,
    campaign_name,
    ad_name,
    advertising_source,
    campaign_type
  ORDER BY
    date 
  ),
  -- Union advertising data
all_advertising AS
  (
  (SELECT * FROM facebook_ads)
  UNION ALL
  (SELECT * FROM tiktok_ads)
  UNION ALL
  (SELECT * FROM pinterest_ads)
  UNION ALL
  (SELECT * FROM snapchat_ads)

  )
-- Union select advertising data
SELECT
  *
FROM all_advertising
${when(incremental(), 
  `WHERE date > (
     SELECT IFNULL(MAX(date), DATE("2024-12-30"))
     FROM ${self()}
  )`
)}


-- Pre-operations for table creation and cleanup
pre_operations {
  CREATE TABLE IF NOT EXISTS ${self()} (
    date DATE,
    day_of_the_week STRING,
    week_of_the_year STRING,
    month_of_the_year STRING,
    country STRING,
    campaign_name STRING,
    ad_name STRING,
    advertising_source STRING,
    campaign_type STRING,
    link_clicks INT64,
    impressions INT64,
    reach INT64,
    transactions INT64,
    revenue FLOAT64, 
    ad_cost FLOAT64
  ) PARTITION BY date;

  DELETE FROM ${self()}
  WHERE date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL ${constants.updatedelete_start_period} DAY) 
                  AND DATE_SUB(CURRENT_DATE(), INTERVAL ${constants.updatedelete_end_period} DAY);
}
